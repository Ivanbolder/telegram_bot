import asyncio
from aiogram import types
from aiogram.dispatcher import Dispatcher
from config import ADMIN_ID
from database import *
from utils import gender_keyboard, edit_options_keyboard, like_dislike_keyboard

user_states = {}

async def start(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id] = {"step": "name", "data": {}}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")

async def handle_text(message: types.Message):
    user_id = str(message.from_user.id)
    state = user_states.get(user_id)
    if not state:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")

    step = state.get("step")
    data = state.get("data", {})

    if step == "name":
        data["name"] = message.text
        state["step"] = "surname"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
    elif step == "surname":
        data["surname"] = message.text
        state["step"] = "age"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    elif step == "age":
        data["age"] = message.text
        state["step"] = "gender"
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=gender_keyboard())
    elif step == "gender":
        data["gender"] = message.text
        state["step"] = "birth"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:")
    elif step == "birth":
        data["birth"] = message.text
        state["step"] = "bio"
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")
    elif step == "bio":
        data["bio"] = message.text
        state["step"] = "photo"
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
    elif step == "edit":
        field = message.text.lower()
        valid = ["–∏–º—è", "—Ñ–∞–º–∏–ª–∏—è", "–≤–æ–∑—Ä–∞—Å—Ç", "–ø–æ–ª", "–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–æ —Å–µ–±–µ", "—Ñ–æ—Ç–æ"]
        if field in valid:
            state["step"] = "edit_value"
            state["field"] = field
            if field == "—Ñ–æ—Ç–æ":
                await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—è.")
    elif step == "edit_value":
        profile = get_user(user_id)
        field_map = {
            "–∏–º—è": "name", "—Ñ–∞–º–∏–ª–∏—è": "surname", "–≤–æ–∑—Ä–∞—Å—Ç": "age",
            "–ø–æ–ª": "gender", "–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": "birth", "–æ —Å–µ–±–µ": "bio"
        }
        db_field = field_map.get(state.get("field"))
        if db_field:
            profile[db_field] = message.text
            save_user(user_id, profile)
            await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.")
        user_states.pop(user_id, None)
    elif step == "search":
        results = find_user_by_name(message.text)
        if not results:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            for uid in results:
                await send_profile(message, uid, user_id)
        user_states.pop(user_id, None)

async def handle_photo(message: types.Message):
    user_id = str(message.from_user.id)
    state = user_states.get(user_id)
    if not state:
        return
    step = state.get("step")
    if step == "photo":
        state["data"]["photo"] = message.photo[-1].file_id
        state["data"]["username"] = message.from_user.username or "–±–µ–∑ username"
        save_user(user_id, state["data"])
        user_states.pop(user_id)
        await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    elif step == "edit_value" and state.get("field") == "—Ñ–æ—Ç–æ":
        profile = get_user(user_id)
        profile["photo"] = message.photo[-1].file_id
        save_user(user_id, profile)
        await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        user_states.pop(user_id)

async def send_profile(message, target_id, viewer_id=None):
    profile = get_user(target_id)
    if not profile:
        return await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    like, dislike = get_likes_info(target_id)
    text = (
        f"üë§ {profile['name']} {profile['surname']} (@{profile.get('username', '')})\n"
        f"üéÇ {profile['birth']} ({profile['age']} –ª–µ—Ç)\n"
        f"‚ö• {profile['gender']}\n"
        f"üìù {profile['bio']}\n"
        f"üëç {like}   üëé {dislike}"
    )
    keyboard = like_dislike_keyboard(viewer_id, target_id)
    await message.answer_photo(profile["photo"], caption=text, reply_markup=keyboard)

async def myanketa(message: types.Message):
    await send_profile(message, str(message.from_user.id), str(message.from_user.id))

async def edit_profile(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id] = {"step": "edit"}
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_options_keyboard())

async def search_user(message: types.Message):
    user_states[str(message.from_user.id)] = {"step": "search", "data": {}}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:")

async def top_users(message: types.Message):
    top = get_top_users()
    if not top:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç.")
    text = "üèÜ <b>–¢–æ–ø –ø–æ –ª–∞–π–∫–∞–º:</b>\n\n"
    for i, (uid, profile) in enumerate(top[:10], 1):
        likes, _ = get_likes_info(uid)
        text += f"{i}. {profile['name']} {profile['surname']} ‚Äî üëç {likes}\n"
    await message.answer(text, parse_mode="HTML")

async def counter(message: types.Message):
    await message.answer(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(get_all_users())}")

async def like_callback(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    msg = call.message
    if not msg.photo:
        return
    target_id = None
    for uid, profile in get_all_users().items():
        if profile.get("photo") == msg.photo[-1].file_id:
            target_id = uid
            break
    if not target_id or target_id == user_id:
        await call.answer("‚õî –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.", show_alert=True)
        return
    value = 1 if call.data == "like" else -1
    like_profile(user_id, target_id, value)
    await call.answer("–ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!")

async def allankets(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
    users = get_all_users()
    if not users:
        return await message.answer("–ù–µ—Ç –∞–Ω–∫–µ—Ç.")
    text = "üìã –í—Å–µ –∞–Ω–∫–µ—Ç—ã:\n\n"
    for u in users.values():
        text += f"{u['name']} {u['surname']}\n"
    await message.answer(text)

async def delete_by_name(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.answer("–£–∫–∞–∂–∏ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /delete_by_name –ò–≤–∞–Ω")
    name = parts[1]
    deleted = delete_user_by_name(name)
    await message.answer(f"–£–¥–∞–ª–µ–Ω–æ –∞–Ω–∫–µ—Ç: {deleted}")

async def delete_all(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
    delete_all_users()
    await message.answer("–í—Å–µ –∞–Ω–∫–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")

async def help_command(message: types.Message):
    text = (
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã\n"
        "/myanketa ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
        "/edit ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        "/search ‚Äî –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏\n"
        "/top ‚Äî —Ç–æ–ø –ø–æ –ª–∞–π–∫–∞–º\n"
        "/counter ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )
    if message.from_user.id == ADMIN_ID:
        text += (
            "\n\n<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:</b>\n"
            "/allankets ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç\n"
            "/delete_by_name ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ –∏–º–µ–Ω–∏\n"
            "/delete_all ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã"
        )
    await message.answer(text, parse_mode="HTML")

def register_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(prepare_delete_profile, lambda c: c.data.startswith("prepare_delete_"))
    dp.register_callback_query_handler(confirm_delete_profile, lambda c: c.data.startswith("confirm_delete_"))
    dp.register_callback_query_handler(cancel_delete, lambda c: c.data == "cancel_delete")
    dp.register_message_handler(start, commands=["start"])
    dp.register_message_handler(myanketa, commands=["myanketa"])
    dp.register_message_handler(edit_profile, commands=["edit"])
    dp.register_message_handler(search_user, commands=["search"])
    dp.register_message_handler(top_users, commands=["top"])
    dp.register_message_handler(counter, commands=["counter"])
    dp.register_message_handler(help_command, commands=["help"])
    dp.register_message_handler(allankets, commands=["allankets"])
    dp.register_message_handler(delete_all, commands=["delete_all"])
    dp.register_message_handler(delete_by_name, commands=["delete_by_name"])
    dp.register_callback_query_handler(like_callback)
    dp.register_message_handler(handle_photo, content_types=["photo"])
    dp.register_message_handler(handle_text, content_types=["text"])

# === –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ===
from database import load_data, save_data



async def prepare_delete_profile(call: types.CallbackQuery):
    uid = call.data.split("_")[-1]
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_{uid}"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete")
    )
    await call.message.edit_caption("‚ùó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:", parse_mode="HTML", reply_markup=markup)

async def confirm_delete_profile(call: types.CallbackQuery):
    uid = call.data.split("_")[-1]
    data = load_data()
    if uid in data:
        del data[uid]
        save_data(data)
        await call.message.edit_caption("üóëÔ∏è –ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.", parse_mode="HTML")
    else:
        await call.message.edit_caption("‚ùå –ê–Ω–∫–µ—Ç–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")

async def cancel_delete(call: types.CallbackQuery):
    await call.message.edit_caption("‚ùé –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", parse_mode="HTML")